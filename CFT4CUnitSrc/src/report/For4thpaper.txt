http://www.jcsce.vnu.edu.vn/index.php/jcsce/user/register
email: dinhngocthi@gmail.com
user/pass: 13028004/thidn12345


@PhD:
	1, Với cái motivation sample bên dưới liệu có thể dùng jpf-symbc để đối ứng được ko?
	⇒ Nếu jpf-symbc cũng làm được thì mình còn có ý nghĩa gì ở đây nữa đâu?
	Có thể define được 1 sample của program mà jpf-symbc ko thể làm gì được ko nhỉ?
	
	
	
	2, Cái độ chính xác epsilon ảnh hưởng như thế nào đến kết quả tìm kiếm nhỉ?
	3, Có thể hỏi han được bạn Tung Nguyen Thanh kia để xin 1 vài gợi ý có được ko nhỉ?

Thưa Thầy

	Em xin lỗi vì cả tháng vừa rồi ko liên lạc gì với Thầy cả ạ. Nhưng thật sự thì em vẫn đang rất nỗ lực ạ, chỉ là hơi bí ý tưởng 1 chút ạ.
	Trong tháng vừa rồi thì công việc nghiên cứu của em có những kết quả sau đây ạ: 
	1, Như em đã thảo luận lần trước với Thầy, lần này hướng nghiên cứu của em muốn tập trung vào sử dụng search-based testing để sinh test data cho các program có chứa lời gọi các function bên ngoài.
	2, Đã survey 1 số paper theo hướng search-based testing nhưng chưa có các paper đưa ra phương pháp sinh được test data cho các loại program có chứa đến lời gọi các function bên ngoài.	
	3, Đề xuất hiện tại của em là, dùng luôn hàm fitness gán thẳng vào các điều kiện làm thỏa mãn các condition trong một PUT, rồi dùng 1 PSO để tìm nghiệm cho nó.
	Ví dụ xét đến một motivation sample foo như sau:
	--------------------------
    public static void foo1(int x, int y) {
		if (fun(x, y) == 1001)
			System.out.println("OK");  //←　target
	}

	public static double fun1(int x, int y) {
		double ret = 0;
		if (y != 0)
			ret = x + y + Math.sin(x);
		return ret;
	}
	--------------------------
	Có thể thấy là, với program foo có chứa lời gọi hàm lẫn sử dụng hàm native của Java (Math.sin(x)), với các đề xuất hiện nay chưa thể sinh test data mà phủ được target branch
	
	Đề xuất của em sẽ tiến hành theo các steps như sau:
	Step 1: Dựa vào công thức Korel, chèn thêm 1 đoạn instrument code vào program foo của mình như sau. Mục đích là cũng để biến cái program foo này thành một fitness function 
		--------------------------
		public static double foo(int x, int y) {
			// instrument code start
			double ret = Math.abs(fun1(x, y) - 1001);  //←　fitness value
			// instrument code end

			if (fun(x, y) == 1001)
				System.out.println("OK");

			return ret;
		}
		--------------------------
	Step 2: Sau đó thực thi PSO với fitness function ở trên, kết quả của em là đã phủ được target branch.
	Completed
	OK
	===============================================
	Solution found at iteration 861, the solutions is:
	Optimation value = 0.000000
		 Best X1: 0.942013
		 Best X2: 1001.872942
	===============================================
	4, Công việc tiếp theo của em là: em sẽ tìm cách áp dụng đề xuất này cho các program phức tạp hơn.