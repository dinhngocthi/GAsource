import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import C.ChuongTrinhChinh;
import C.DuongKiemThu;
import C.Utils;
import C.staticVariable;
import C.GA;
import Graphics.Canvas;
import Graphics.CanvasPhuCap3;
import LoopPath.HandleSimpleLoopPath;
import LoopPath.HandleTwoNestedLoop;
import LoopPath.ParseLoopTestpath;

import javax.swing.SwingWorker;

public final class GUI3 extends javax.swing.JFrame
{

    private static final long serialVersionUID = 1L;

    // test1
    public GUI3()
    {
        try
        {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        }
        catch (Exception e)
        {
        }

        setTitle("CFT4CUnit_v5");
        initComponents();
        StartUp_iniAllRowTable();
        jtpResult.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e)
            {
                jtStatementTable.clearSelection();
                jtBranchCoverage.clearSelection();
                jtSubConditionCoverage.clearSelection();
                jtLoopPaths.clearSelection();

            }
        });
        setEventWhenClickJTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtfPathSrc = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jbOpen = new javax.swing.JButton();
        jbSolveEquation = new javax.swing.JButton();
        jbSave = new javax.swing.JLabel();
        jScrollPane19 = new javax.swing.JScrollPane();
        jtpDepth = new javax.swing.JTextPane();
        jLabel5 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jspCanvas = new javax.swing.JTabbedPane();
        jspCanvas1va2 = new javax.swing.JScrollPane();
        jspCanvas3 = new javax.swing.JScrollPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jtpResult = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtStatementTable = new javax.swing.JTable();
        gdfgd = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtBranchCoverage = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jtSubConditionCoverage = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtLoopPaths = new javax.swing.JTable();
        jtpTestLoop = new javax.swing.JTabbedPane();
        jScrollPane16 = new javax.swing.JScrollPane();
        jtTestInnerLoop = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        jtTestOuterLoop = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        jtTestSimpleLoop = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtBasisPaths = new javax.swing.JTable();
        jtTabBelow = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpSource = new javax.swing.JTextPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane18 = new javax.swing.JScrollPane();
        jtpSmt_LibFile = new javax.swing.JTextPane();
        jPanel8 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jtfSmt_Lib_path_file = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jtfSmt_Lib_path_lib = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        jtpTestcase = new javax.swing.JTextPane();
        jPanel10 = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jScrollPane22 = new javax.swing.JScrollPane();
        jtpInfor1vs2 = new javax.swing.JTextPane();
        jScrollPane23 = new javax.swing.JScrollPane();
        jtpInfor3 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        jScrollPane1.setViewportView(jtfPathSrc);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/folder.png"))); // NOI18N

        jbOpen.setForeground(new java.awt.Color(0, 51, 153));
        jbOpen.setText("Open a C function");
        jbOpen.setToolTipText("The C function only contains integer/float/array variables");
        jbOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbOpenActionPerformed(evt);
            }
        });

        jbSolveEquation.setForeground(new java.awt.Color(0, 0, 204));
        jbSolveEquation.setText("Generate test cases");
        jbSolveEquation
                .setToolTipText("<html><p width=\"300\">A mimimum number of test case satisfying coverage criterion is generated. In the case the source code contains simple loops or two-nested loops, a set of test cases for checking the reliable of each loop is generated.</p></html>");
        jbSolveEquation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jbSolveEquationActionPerformed(evt);
            }
        });

        jbSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/save.png"))); // NOI18N
        jbSave.setToolTipText("Export the result to .html and png");
        jbSave.setEnabled(false);
        jbSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jbSaveMouseClicked(evt);
            }
        });

        jtpDepth.setText("1");
        jScrollPane19.setViewportView(jtpDepth);

        jLabel5.setText("The maximum number of iterations for each loop");
        jLabel5.setToolTipText("This value shoule be small.");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                jPanel2Layout.createSequentialGroup().addGap(0, 0, 0).addComponent(jbSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(jLabel5).addGap(18, 18, 18)
                        .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addComponent(jbSolveEquation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jbOpen).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)));
        jPanel2Layout.setVerticalGroup(jPanel2Layout
                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSolveEquation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbOpen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(
                        javax.swing.GroupLayout.Alignment.TRAILING,
                        jPanel2Layout
                                .createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(
                                        jPanel2Layout
                                                .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jScrollPane19, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE))));

        jSplitPane1.setDividerLocation(684);

        jspCanvas.setBackground(new java.awt.Color(51, 102, 255));

        jspCanvas1va2.setBackground(new java.awt.Color(0, 102, 102));
        jspCanvas.addTab("CFG for statement/branch coverage", jspCanvas1va2);
        jspCanvas.addTab("CGF for multiple condition coverage", jspCanvas3);

        jSplitPane1.setLeftComponent(jspCanvas);

        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jtpResult.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jtpResultStateChanged(evt);
            }
        });

        jtStatementTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][]
        {

        }, new String[]
        { "No.k", "Test path", "Path constraints", "Test case" }) {
            Class[] types = new Class[]
            { java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class };

            public Class getColumnClass(int columnIndex)
            {
                return types[columnIndex];
            }
        });
        jtStatementTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(jtStatementTable);
        if (jtStatementTable.getColumnModel().getColumnCount() > 0)
        {
            jtStatementTable.getColumnModel().getColumn(0).setMinWidth(0);
            jtStatementTable.getColumnModel().getColumn(0).setMaxWidth(40);
            jtStatementTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 506,
                Short.MAX_VALUE));
        jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 255,
                Short.MAX_VALUE));

        jtpResult.addTab("Statement coverage", jPanel5);

        jtBranchCoverage.setModel(new javax.swing.table.DefaultTableModel(new Object[][]
        {

        }, new String[]
        { "No.k", "Test path", "Path constraints", "Test case" }) {
            Class[] types = new Class[]
            { java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class };

            public Class getColumnClass(int columnIndex)
            {
                return types[columnIndex];
            }
        });
        jtBranchCoverage.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(jtBranchCoverage);
        if (jtBranchCoverage.getColumnModel().getColumnCount() > 0)
        {
            jtBranchCoverage.getColumnModel().getColumn(0).setMinWidth(0);
            jtBranchCoverage.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        javax.swing.GroupLayout gdfgdLayout = new javax.swing.GroupLayout(gdfgd);
        gdfgd.setLayout(gdfgdLayout);
        gdfgdLayout.setHorizontalGroup(gdfgdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE));
        gdfgdLayout.setVerticalGroup(gdfgdLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE));

        jtpResult.addTab("Branch coverage", gdfgd);

        jtSubConditionCoverage.setModel(new javax.swing.table.DefaultTableModel(new Object[][]
        {

        }, new String[]
        { "No.k", "Test path", "Path constraints", "Test case" }) {
            Class[] types = new Class[]
            { java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class };

            public Class getColumnClass(int columnIndex)
            {
                return types[columnIndex];
            }
        });
        jtSubConditionCoverage.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(jtSubConditionCoverage);
        if (jtSubConditionCoverage.getColumnModel().getColumnCount() > 0)
        {
            jtSubConditionCoverage.getColumnModel().getColumn(0).setMinWidth(0);
            jtSubConditionCoverage.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 506,
                Short.MAX_VALUE));
        jPanel7Layout.setVerticalGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 255,
                Short.MAX_VALUE));

        jtpResult.addTab("Multiple condition coverage", jPanel7);

        jtLoopPaths.setModel(new javax.swing.table.DefaultTableModel(new Object[][]
        {

        }, new String[]
        { "No.k", "Testpath" }) {
            Class[] types = new Class[]
            { java.lang.String.class, java.lang.String.class };

            public Class getColumnClass(int columnIndex)
            {
                return types[columnIndex];
            }
        });
        jtLoopPaths.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jtLoopPaths);
        if (jtLoopPaths.getColumnModel().getColumnCount() > 0)
        {
            jtLoopPaths.getColumnModel().getColumn(0).setMinWidth(0);
            jtLoopPaths.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        jtpTestLoop.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                jtpTestLoopStateChanged(evt);
            }
        });

        jtTestInnerLoop.setModel(new javax.swing.table.DefaultTableModel(new Object[][]
        {
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null } }, new String[]
        { "Number iterations", "Test path", "Path constraints", "Test case" }) {
            Class[] types = new Class[]
            { java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class };

            public Class getColumnClass(int columnIndex)
            {
                return types[columnIndex];
            }
        });
        jScrollPane16.setViewportView(jtTestInnerLoop);

        jtpTestLoop.addTab("Test inner loop", jScrollPane16);

        jtTestOuterLoop.setModel(new javax.swing.table.DefaultTableModel(new Object[][]
        {
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null } }, new String[]
        { "Number iterations", "Test path", "Path constraints", "Test case" }) {
            Class[] types = new Class[]
            { java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class };

            public Class getColumnClass(int columnIndex)
            {
                return types[columnIndex];
            }
        });
        jScrollPane17.setViewportView(jtTestOuterLoop);

        jtpTestLoop.addTab("Test outer loop", jScrollPane17);

        jtTestSimpleLoop.setModel(new javax.swing.table.DefaultTableModel(new Object[][]
        {
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null },
        { null, null, null, null } }, new String[]
        { "Number iterations", "Test path", "Path constraints", "Test case" }) 
        {
            Class[] types = new Class[]
            { java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class };

            public Class getColumnClass(int columnIndex)
            {
                return types[columnIndex];
            }
        });
        jScrollPane12.setViewportView(jtTestSimpleLoop);

        jtpTestLoop.addTab("Test simple loop", jScrollPane12);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE).addComponent(jtpTestLoop));
        jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                jPanel4Layout.createSequentialGroup().addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jtpTestLoop, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)));

        jtpResult.addTab("Simple loop/Two-nested loop", jPanel4);

        jtBasisPaths.setModel(new javax.swing.table.DefaultTableModel(new Object[][]
        {

        }, new String[]
        { "No.k", "Test path", "Path constraints", "Test case" }) {
            Class[] types = new Class[]
            { java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class };

            public Class getColumnClass(int columnIndex)
            {
                return types[columnIndex];
            }
        });
        jtBasisPaths.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jtBasisPaths);
        if (jtBasisPaths.getColumnModel().getColumnCount() > 0)
        {
            jtBasisPaths.getColumnModel().getColumn(0).setMinWidth(0);
            jtBasisPaths.getColumnModel().getColumn(0).setMaxWidth(40);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 506,
                Short.MAX_VALUE));
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 255,
                Short.MAX_VALUE));

        jtpResult.addTab("The feasible test paths for statement/branch coverage", jPanel3);

        jSplitPane2.setTopComponent(jtpResult);

        jScrollPane2.setViewportView(jtpSource);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 506,
                Short.MAX_VALUE));
        jPanel9Layout.setVerticalGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 763,
                Short.MAX_VALUE));

        jtTabBelow.addTab("Source code", jPanel9);

        jScrollPane18.setViewportView(jtpSmt_LibFile);

        jLabel11.setText("Path SMT-Lib folder");

        jtfSmt_Lib_path_file.setText("C:/CFT4CUnit/");
        jtfSmt_Lib_path_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jtfSmt_Lib_path_fileActionPerformed(evt);
            }
        });

        jLabel12.setText("Path SMT-Solver Z3");

        // jtfSmt_Lib_path_lib.setText("c:/Z3/bin/z3.exe"); D.N.Thi
        //jtfSmt_Lib_path_lib.setText("D:/PhD/SymbolicExecution/tool/SPF/z3/bin/z3.exe"); // home
        jtfSmt_Lib_path_lib.setText("D:/Thi.DN/PhD/Tools/CFT4CUnit/z3/bin/z3.exe");//Cty

        jtfSmt_Lib_path_lib.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jtfSmt_Lib_path_libActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                jPanel8Layout
                        .createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                                jPanel8Layout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(
                                                jPanel8Layout.createSequentialGroup().addComponent(jLabel11).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jtfSmt_Lib_path_file, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(
                                                jPanel8Layout.createSequentialGroup().addComponent(jLabel12).addGap(18, 18, 18)
                                                        .addComponent(jtfSmt_Lib_path_lib, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(134, Short.MAX_VALUE)));
        jPanel8Layout.setVerticalGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                javax.swing.GroupLayout.Alignment.TRAILING,
                jPanel8Layout
                        .createSequentialGroup()
                        .addGroup(
                                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel11)
                                        .addComponent(jtfSmt_Lib_path_file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                                jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jLabel12)
                                        .addComponent(jtfSmt_Lib_path_lib, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane18)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                jPanel6Layout.createSequentialGroup().addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));

        jtTabBelow.addTab("SMT-Lib file", jPanel6);

        jScrollPane13.setViewportView(jtpTestcase);

        jtTabBelow.addTab("Test case in details", jScrollPane13);

        jSplitPane3.setDividerLocation(160);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane22.setViewportView(jtpInfor1vs2);

        jSplitPane3.setTopComponent(jScrollPane22);

        jScrollPane23.setViewportView(jtpInfor3);

        jSplitPane3.setRightComponent(jScrollPane23);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 506,
                Short.MAX_VALUE));
        jPanel10Layout.setVerticalGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 763,
                Short.MAX_VALUE));

        jtTabBelow.addTab("Details of analysis process", jPanel10);

        jSplitPane2.setRightComponent(jtTabBelow);

        jSplitPane1.setRightComponent(jSplitPane2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1203, Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                jPanel1Layout.createSequentialGroup().addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1099, Short.MAX_VALUE)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtfSmt_Lib_path_fileActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_jtfSmt_Lib_path_fileActionPerformed
     // TODO add your handling code here:
    }// GEN-LAST:event_jtfSmt_Lib_path_fileActionPerformed

    private void jtfSmt_Lib_path_libActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_jtfSmt_Lib_path_libActionPerformed
     // TODO add your handling code here:
    }// GEN-LAST:event_jtfSmt_Lib_path_libActionPerformed

    private void jtpTestLoopStateChanged(javax.swing.event.ChangeEvent evt)
    {// GEN-FIRST:event_jtpTestLoopStateChanged
        jtpTestcase.setText("");
        try
        {
            jtTestInnerLoop.clearSelection();
        }
        catch (Exception e)
        {
        }
        try
        {
            jtTestOuterLoop.clearSelection();
        }
        catch (Exception e)
        {
        }
        try
        {
            jtTestSimpleLoop.clearSelection();
        }
        catch (Exception e)
        {
        }
    }// GEN-LAST:event_jtpTestLoopStateChanged

    private void jbOpenActionPerformed(java.awt.event.ActionEvent evt)
    {// GEN-FIRST:event_jbOpenActionPerformed
     // if (task1.getState()==SwingWorker.StateValue.STARTED)
     // task1.cancel(true);
     // if (task2.getState()==SwingWorker.StateValue.STARTED)
     // task2.cancel(true);

        GUtils.clearAllRowsInJTable(jtStatementTable.getRowCount(), jtStatementTable.getColumnCount(), (DefaultTableModel) jtStatementTable.getModel());
        GUtils.clearAllRowsInJTable(jtBranchCoverage.getRowCount(), jtBranchCoverage.getColumnCount(), (DefaultTableModel) jtBranchCoverage.getModel());
        GUtils.clearAllRowsInJTable(jtLoopPaths.getRowCount(), jtLoopPaths.getColumnCount(), (DefaultTableModel) jtLoopPaths.getModel());
        GUtils.clearAllRowsInJTable(jtSubConditionCoverage.getRowCount(), jtSubConditionCoverage.getColumnCount(), (DefaultTableModel) jtSubConditionCoverage.getModel());
        GUtils.clearAllRowsInJTable(jtBasisPaths.getRowCount(), jtBasisPaths.getColumnCount(), (DefaultTableModel) jtBasisPaths.getModel());
        GUtils.clearAllRowsInJTable(jtTestSimpleLoop.getRowCount(), jtTestSimpleLoop.getColumnCount(), (DefaultTableModel) jtTestSimpleLoop.getModel());
        GUtils.clearAllRowsInJTable(jtTestInnerLoop.getRowCount(), jtTestInnerLoop.getColumnCount(), (DefaultTableModel) jtTestInnerLoop.getModel());
        GUtils.clearAllRowsInJTable(jtTestOuterLoop.getRowCount(), jtTestOuterLoop.getColumnCount(), (DefaultTableModel) jtTestOuterLoop.getModel());

        jtpTestcase.setText("");

        jtpSource.setText("");
        jtpSmt_LibFile.setText("");
        jbSave.setEnabled(false);
        jspCanvas1va2.setViewportView(null);
        jspCanvas3.setViewportView(null);

        JFileChooser fc = new JFileChooser();
        if (fc.showOpenDialog(this.jbOpen) == 0)
        {
            run(fc);
        }
    }// GEN-LAST:event_jbOpenActionPerformed

    private void run(JFileChooser fc)
    {
        try
        {
            staticVariable.reset();
            String pathFile = fc.getSelectedFile().getAbsolutePath();
            // "C:\\Users\\anhanh\\Documents\\Vi du CFT4CUnit\\Foo.c";
            staticVariable.Paramater.depth = Utils.toInt(jtpDepth.getText() + "");
            staticVariable.Paramater.Smt_Lib_path_lib = jtfSmt_Lib_path_lib.getText();
            staticVariable.Paramater.Smt_Lib_path_file = jtfSmt_Lib_path_file.getText();
            new File(staticVariable.Paramater.Smt_Lib_path_file).mkdir();
            ctc = new ChuongTrinhChinh(pathFile);
            ctc.run();

            SwingWorker task1 = new SwingWorker() 
            {
                @Override
                protected Object doInBackground() throws Exception
                {
                    // D.N.Thi for testing
                    ctc.calculateDist();
                    // D.N.Thi for testing                    
                    ArrayList<ArrayList<Integer>> pathList = ctc.getAllPaths(staticVariable.Statement.danhSachKe, 
                                                                             staticVariable.AllPath.NodeElements);// code
                    
                    String text = "The process for generating test paths satisfying " + "statement/branch coverage\n---------------------\n";
                    jtpInfor1vs2.setText(text);
                    text = jtpInfor1vs2.getText() + "\nTotal possible test paths = " + pathList.size();
                    jtpInfor1vs2.setText(text);
                    int[] startTime = Utils.getTime();
                    text = jtpInfor1vs2.getText() + "\nFinding the feasible test paths...";
                    jtpInfor1vs2.setText(text);
                    staticVariable.AllPath.pathList = ctc.getAllFeasiblePath(pathList);// code
                    text = jtpInfor1vs2.getText() + "\nFinished ... The number of feasible test paths = " + staticVariable.AllPath.pathList.size();
                    jtpInfor1vs2.setText(text);

                    int[] endTime = Utils.getTime();
                    text = jtpInfor1vs2.getText() + "\nTotal time for finding the feasible test paths = " + ((endTime[0] - startTime[0]) * 60 + (endTime[1] - startTime[1])) + " seconds";
                    jtpInfor1vs2.setText(text);

                    ctc.getTestpathOfStatement();// code
                    text = jtpInfor1vs2.getText() + "\nFinished ... Generate " + staticVariable.Statement.pathList.size() + " test paths satisfying the statement coverage criterion ";
                    jtpInfor1vs2.setText(text);
                    ctc.getTestpathOfBranch();// code
                    text = jtpInfor1vs2.getText() + "\nFinished ... Generate " + staticVariable.Branch.pathList.size() + " test paths satisfying the branch condition coverage criterion";
                    jtpInfor1vs2.setText(text);
                    return null;
                }

                @Override
                protected void done()
                {
                    super.done();
                    cPhuCap1va2 = new Canvas();
                    cPhuCap1va2.setBackground(Color.white);
                    cPhuCap1va2.createGraphFromNodeList(staticVariable.Statement.NodeRelations);
                    cPhuCap1va2.setPreferredSize(new Dimension(1320, 770));
                    jspCanvas1va2.setViewportView(cPhuCap1va2);
                    displayStatementCoverageResult();
                    displayBranchCoverageResult();
                    displayAllPathsResult();
                    displayLoopPaths();
                    invalidate();
                }

            };
            SwingWorker task2 = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception
                {
                    String text = "The process for generating test paths satisfying multiple condition coverage\n---------------------\n";
                    jtpInfor3.setText(text);
                    ArrayList<ArrayList<Integer>> pathList = ctc.getAllPaths(staticVariable.AllPathSubCondition.danhSachKe, staticVariable.AllPathSubCondition.NodeElements);// code

                    text = jtpInfor3.getText() + "\nTotal possible test paths = " + pathList.size();
                    jtpInfor3.setText(text);
                    text = jtpInfor3.getText() + "\nFinding the feasible test paths...";
                    jtpInfor3.setText(text);
                    staticVariable.AllPathSubCondition.pathList = ctc.getAllFeasibleSubconditionPath(pathList);// code
                    text = jtpInfor3.getText() + "\nFinished ... The number of feasible test paths = " + staticVariable.AllPathSubCondition.pathList.size();
                    jtpInfor3.setText(text);
                    ctc.getTestpathOfSubCondition();// code
                    text = jtpInfor3.getText() + "\nFinished ... Generate " + staticVariable.SubCondition.pathList.size() + " test paths satisfying the multiple condition coverage criterion";
                    jtpInfor3.setText(text);
                    return null;
                }

                @Override
                protected void done()
                {
                    super.done();
                    cPhuCap3 = new CanvasPhuCap3();
                    cPhuCap3.setBackground(Color.white);
                    cPhuCap3.setPreferredSize(new Dimension(1320, 770));
                    cPhuCap3.createGraphFromNodeList(staticVariable.SubCondition.NodeRelations);
                    jspCanvas3.setViewportView(cPhuCap3);
                    displaySubConditionCoverageResult();
                    invalidate();
                }

            };
            task1.execute();
            task2.execute();
            jtpSource.setText(Utils.getSourceCode(pathFile));
            jtfPathSrc.setText(pathFile);
            jbSave.setEnabled(true);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(GUI3.this, e.getMessage() + "", "Load file caught some errors", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jbSolveEquationActionPerformed(java.awt.event.ActionEvent evt)
    {

    }

    private void jbSaveMouseClicked(java.awt.event.MouseEvent evt)
    {// GEN-FIRST:event_jbSaveMouseClicked
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showSaveDialog(this.jbSave);
        if (returnVal == 0)
        {
            File file = fc.getSelectedFile();
            String currentPathFile = file.getAbsolutePath();
            // xoa duoi file
            if (currentPathFile.contains("."))
            {
                currentPathFile = currentPathFile.substring(0, currentPathFile.lastIndexOf("."));
            }
            //
            BufferedImage bi1 = GUtils.createImage(cPhuCap1va2);
            BufferedImage bi2 = GUtils.createImage(cPhuCap3);
            try
            {
                ImageIO.write(bi1, "png", new File(currentPathFile + "_Statement_And_Branch.png"));
                ImageIO.write(bi2, "png", new File(currentPathFile + "_Sub_Condition.png"));
                ArrayList<String[]> titleColumn = new ArrayList<String[]>();
                titleColumn.add(new String[]
                { "STT", "Đường kiểm thử", "Hệ ràng buộc" });
                titleColumn.add(new String[]
                { "STT", "Đường kiểm thử", "Hệ ràng buộc" });
                titleColumn.add(new String[]
                { "STT", "Đường kiểm thử", "Hệ ràng buộc" });
                titleColumn.add(new String[]
                { "STT", "Đường kiểm thử", "Hệ ràng buộc" });
                titleColumn.add(new String[]
                { "STT", "Đường kiểm thử", "Hệ ràng buộc" });
                titleColumn.add(new String[]
                { "STT", "Đường kiểm thử", "Hệ ràng buộc" });
                GUtils.exportJTableToExcel(new JTable[]
                { jtStatementTable, jtBranchCoverage, jtSubConditionCoverage, jtBasisPaths, }, new String[]
                { "Phủ câu lệnh", "Phủ nhánh", "Phủ điều kiện con", "Tập đường thực thi được phủ câu lệnh/nhánh" }, titleColumn, new File(currentPathFile + ".xls"));
                JOptionPane.showMessageDialog(GUI3.this, "Export Successfully");
            }
            catch (IOException ex)
            {
                JOptionPane.showMessageDialog(GUI3.this, "Export error!");
            }
        }
    }// GEN-LAST:event_jbSaveMouseClicked

    private void jtpResultStateChanged(javax.swing.event.ChangeEvent evt)
    {// GEN-FIRST:event_jtpResultStateChanged
        switch (jtpResult.getSelectedIndex())
        {
        case 0:
            jspCanvas.setSelectedIndex(0);
            break;
        case 1:
            jspCanvas.setSelectedIndex(0);
            break;
        case 3:
            jspCanvas.setSelectedIndex(0);
            break;
        case 2:
            jspCanvas.setSelectedIndex(1);
            break;
        case 4:
            jspCanvas.setSelectedIndex(0);
            break;
        }
        jtpTestcase.setText("");
    }// GEN-LAST:event_jtpResultStateChanged

    /**
     * @param args
     *            the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase
         * /tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(GUI3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run()
            {
                new GUI3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel gdfgd;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JButton jbOpen;
    private javax.swing.JLabel jbSave;
    private javax.swing.JButton jbSolveEquation;
    private javax.swing.JTabbedPane jspCanvas;
    private javax.swing.JScrollPane jspCanvas1va2;
    private javax.swing.JScrollPane jspCanvas3;
    private javax.swing.JTable jtBasisPaths;
    private javax.swing.JTable jtBranchCoverage;
    private javax.swing.JTable jtLoopPaths;
    private javax.swing.JTable jtStatementTable;
    private javax.swing.JTable jtSubConditionCoverage;
    private javax.swing.JTabbedPane jtTabBelow;
    private javax.swing.JTable jtTestInnerLoop;
    private javax.swing.JTable jtTestOuterLoop;
    private javax.swing.JTable jtTestSimpleLoop;
    private javax.swing.JTextPane jtfPathSrc;
    private javax.swing.JTextField jtfSmt_Lib_path_file;
    private javax.swing.JTextField jtfSmt_Lib_path_lib;
    private javax.swing.JTextPane jtpDepth;
    private javax.swing.JTextPane jtpInfor1vs2;
    private javax.swing.JTextPane jtpInfor3;
    private javax.swing.JTabbedPane jtpResult;
    private javax.swing.JTextPane jtpSmt_LibFile;
    private javax.swing.JTextPane jtpSource;
    private javax.swing.JTabbedPane jtpTestLoop;
    private javax.swing.JTextPane jtpTestcase;
    // End of variables declaration//GEN-END:variables
    static ChuongTrinhChinh ctc;
    static int rowClicked;
    static CanvasPhuCap3 cPhuCap3;
    static Canvas cPhuCap1va2;
    static int rowSelectedOfResultTable;
    static int rowSelectedOfTestResultLoopTable;
    static int numRowOfTable = 400;
    static boolean showIdNode = false;
    static String clickTestpath;

    public void StartUp_iniAllRowTable()
    {
        String[] o = new String[jtBranchCoverage.getColumnCount()];
        for (int i = 0; i < o.length; i++)
        {
            o[i] = "";
        }
        for (int i = 0; i < numRowOfTable; i++)
        {
            ((DefaultTableModel) jtBranchCoverage.getModel()).addRow(o);
            ((DefaultTableModel) jtStatementTable.getModel()).addRow(o);
            ((DefaultTableModel) jtSubConditionCoverage.getModel()).addRow(o);
            ((DefaultTableModel) jtLoopPaths.getModel()).addRow(o);
            ((DefaultTableModel) jtBasisPaths.getModel()).addRow(o);
        }
    }

    private void displayStatementCoverageResult()
    {
        DefaultTableModel tm = (DefaultTableModel) jtStatementTable.getModel();
        int rowId = 0;
        for (DuongKiemThu item : staticVariable.Statement.pathList)
        {
            GUtils.updateRow(rowId, new String[]
            { rowId + "", item.getTestpathInString().toString(), item.getConstraintList().toString(), item.getTestcase() }, tm);
            rowId++;
        }
    }

    private void displayBranchCoverageResult()
    {
        DefaultTableModel tm = (DefaultTableModel) jtBranchCoverage.getModel();
        int rowId = 0;
        for (DuongKiemThu item : staticVariable.Branch.pathList)
        {
            GUtils.updateRow(rowId, new String[]
            { rowId + "", item.getTestpathInString().toString(), item.getConstraintList().toString(), item.getTestcase() }, tm);
            rowId++;
        }
    }

    private void displayAllPathsResult()
    {
        DefaultTableModel tm = (DefaultTableModel) jtBasisPaths.getModel();
        int rowId = 0;
        for (DuongKiemThu item : staticVariable.AllPath.pathList)
        {
            GUtils.updateRow(rowId, new String[]
            { rowId + "", item.getTestpathInString().toString(), item.getConstraintList().toString(), item.getTestcase() }, tm);
            rowId++;
        }
    }

    private void displaySubConditionCoverageResult()
    {
        DefaultTableModel tm = (DefaultTableModel) jtSubConditionCoverage.getModel();
        int rowId = 0;
        for (DuongKiemThu item : staticVariable.SubCondition.pathList)
        {
            GUtils.updateRow(rowId, new String[]
            { rowId + "", item.getTestpathInString().toString(), item.getConstraintList().toString(), item.getTestcase() }, tm);
            rowId++;
        }
    }

    private void displayLoopPaths()
    {
        DefaultTableModel tmLoopPaths = (DefaultTableModel) jtLoopPaths.getModel();
        for (DuongKiemThu testpath : staticVariable.AllPath.pathList)
        {
            ParseLoopTestpath parser = new ParseLoopTestpath(testpath);
            if (parser.getTypeOfTestpath() == ParseLoopTestpath.SIMPLE_LOOP || parser.getTypeOfTestpath() == ParseLoopTestpath.TWO_ESTED_LOOP)
            {
                staticVariable.LoopTestpath.pathList.add(testpath);
            }
        }
        int rowId = 0;
        for (DuongKiemThu d : staticVariable.LoopTestpath.pathList)
        {
            GUtils.updateRow(rowId, new String[]
            { rowId + "", d.getTestpathInString(), }, tmLoopPaths);
            rowId++;
        }
    }

    private void displaySimpleLoop(DuongKiemThu testpath) throws Exception
    {
        DefaultTableModel tmLoopPaths = (DefaultTableModel) jtTestSimpleLoop.getModel();

        HandleSimpleLoopPath handler = new HandleSimpleLoopPath(testpath.getTestpathInString(), testpath.getTestpathIndexInString());
        int rowId = 0;
        Map<Integer, String> simpleLoopList = handler.getOutput();
        for (Object numLoop : simpleLoopList.keySet())
        {
            String __testpath__ = simpleLoopList.get(numLoop);

            ArrayList<Integer> testpathIndex = new ArrayList<Integer>();// có
            // thể
            // rỗng
            DuongKiemThu d = new DuongKiemThu(__testpath__, testpathIndex, staticVariable.Paramater.variableOfTC, "#", staticVariable.Paramater.Smt_Lib_path_lib,
                    staticVariable.Paramater.Smt_Lib_path_file, "simpleLoop.smt2");
            GUtils.updateRow(rowId, new String[]
            { numLoop.toString(), simpleLoopList.get(numLoop), d.getConstraintList().toString(), d.getTestcase() }, tmLoopPaths);
            rowId++;
        }
    }

    private void displayTwoNestedLoop(DuongKiemThu testpath) throws Exception
    {
        DefaultTableModel tmInnerLoop = (DefaultTableModel) jtTestInnerLoop.getModel();
        DefaultTableModel tmOuterLoop = (DefaultTableModel) jtTestOuterLoop.getModel();

        HandleTwoNestedLoop twoNestedhandler = new HandleTwoNestedLoop(testpath.getTestpathInString(), testpath.getTestpathIndexInString());
        String innerLoop = twoNestedhandler.getInnerSimpleLoopInString();
        String innerLoopIndex = twoNestedhandler.getInnerSimpleLoopIndexInString();

        String outerLoop = twoNestedhandler.getOuterSimpleLoopInString();
        String outerLoopIndex = twoNestedhandler.getOuterSimpleLoopIndexInString();

        // Hien thi tab inner simple loop
        HandleSimpleLoopPath innerSimpleHandler = new HandleSimpleLoopPath(innerLoop, innerLoopIndex);
        int rowId = 0;
        Map<Integer, String> innerLoopList = innerSimpleHandler.getOutput();
        for (Object numLoop : innerLoopList.keySet())
        {
            String __testpath__ = innerLoopList.get(numLoop);
            ArrayList<Integer> testpathIndex = new ArrayList<Integer>();// có
            // thể
            // rỗng
            DuongKiemThu d = new DuongKiemThu(__testpath__, testpathIndex, staticVariable.Paramater.variableOfTC, "#", staticVariable.Paramater.Smt_Lib_path_lib,
                    staticVariable.Paramater.Smt_Lib_path_file, "simpleLoop.smt2");
            GUtils.updateRow(rowId, new String[]
            { numLoop.toString(), innerLoopList.get(numLoop), d.getConstraintList().toString(), d.getTestcase() }, tmInnerLoop);
            rowId++;
        }
        // hien thi tab outer simple loop
        rowId = 0;
        HandleSimpleLoopPath outerSimpleHandler = new HandleSimpleLoopPath(outerLoop, outerLoopIndex);
        Map<Integer, String> outerLoopList = outerSimpleHandler.getOutput();
        for (Object numLoop : outerLoopList.keySet())
        {
            String __testpath__ = outerLoopList.get(numLoop);
            ArrayList<Integer> testpathIndex = new ArrayList<Integer>();// có
            // thể
            // rỗng
            DuongKiemThu d = new DuongKiemThu(__testpath__, testpathIndex, staticVariable.Paramater.variableOfTC, "#", staticVariable.Paramater.Smt_Lib_path_lib,
                    staticVariable.Paramater.Smt_Lib_path_file, "simpleLoop.smt2");
            GUtils.updateRow(rowId, new String[]
            { numLoop.toString(), outerLoopList.get(numLoop), d.getConstraintList().toString(), d.getTestcase() }, tmOuterLoop);
            rowId++;
        }
    }

    public void setEventWhenClickJTable()
    {
        jtBasisPaths.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event)
            {
                int row = jtBasisPaths.getSelectedRow();
                if (row < staticVariable.AllPath.pathList.size() && row >= 0)
                {
                    rowSelectedOfResultTable = row;
                    DuongKiemThu testpath = staticVariable.AllPath.pathList.get(row);
                    String clickedTestpath = testpath.getTestpathInString();
                    cPhuCap1va2.updateLineColorWhenClick(clickedTestpath);

                    cPhuCap1va2.showSttSelectedTestpath(clickedTestpath);
                    jtpSmt_LibFile.setText(testpath.getSmtFile());
                    jtpTestcase.setText("Output from Z3:\n" + testpath.getTestcaseInZ3() + "\n\nNormalized output:\n" + testpath.getTestcase());
                }
            }
        });
        jtSubConditionCoverage.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event)
            {
                int row = jtSubConditionCoverage.getSelectedRow();
                if (row < staticVariable.SubCondition.pathList.size() && row >= 0)
                {
                    rowSelectedOfResultTable = row;
                    DuongKiemThu testpath = staticVariable.SubCondition.pathList.get(row);
                    String clickedTestpath = testpath.getTestpathInString();
                    cPhuCap3.updateLineColorWhenClick(clickedTestpath);

                    cPhuCap3.showSttSelectedTestpath(clickedTestpath);
                    jtpSmt_LibFile.setText(testpath.getSmtFile());
                    jtpTestcase.setText("Output from Z3:\n" + testpath.getTestcaseInZ3() + "\n\nNormalized output:\n" + testpath.getTestcase());
                }
            }
        });
        jtBranchCoverage.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event)
            {
                int row = jtBranchCoverage.getSelectedRow();
                if (row < staticVariable.Branch.pathList.size() && row >= 0)
                {
                    rowSelectedOfResultTable = row;
                    DuongKiemThu testpath = staticVariable.Branch.pathList.get(row);
                    String clickedTestpath = testpath.getTestpathInString();
                    cPhuCap1va2.updateLineColorWhenClick(clickedTestpath);

                    cPhuCap1va2.showSttSelectedTestpath(clickedTestpath);
                    jtpSmt_LibFile.setText(testpath.getSmtFile());
                    jtpTestcase.setText("Output from Z3:\n" + testpath.getTestcaseInZ3() + "\n\nNormalized output:\n" + testpath.getTestcase());
                }
            }
        });
        jtStatementTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent event)
            {
                int row = jtStatementTable.getSelectedRow();
                if (row < staticVariable.Statement.pathList.size() && row >= 0)
                {
                    rowSelectedOfResultTable = row;
                    DuongKiemThu testpath = staticVariable.Statement.pathList.get(row);
                    String clickedTestpath = testpath.getTestpathInString();
                    cPhuCap1va2.updateLineColorWhenClick(clickedTestpath);

                    cPhuCap1va2.showSttSelectedTestpath(clickedTestpath);
                    jtpSmt_LibFile.setText(testpath.getSmtFile());
                    jtpTestcase.setText("Output from Z3:\n" + testpath.getTestcaseInZ3() + "\n\nNormalized output:\n" + testpath.getTestcase());
                }
            }
        });
        jtLoopPaths.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event)
            {
                if (event.getValueIsAdjusting())
                {
                    return;
                }
                System.out.println("Called");
                GUtils.clearAllRowsInJTable(jtTestSimpleLoop.getRowCount(), jtTestSimpleLoop.getColumnCount(), (DefaultTableModel) jtTestSimpleLoop.getModel());
                GUtils.clearAllRowsInJTable(jtTestInnerLoop.getRowCount(), jtTestInnerLoop.getColumnCount(), (DefaultTableModel) jtTestInnerLoop.getModel());
                GUtils.clearAllRowsInJTable(jtTestOuterLoop.getRowCount(), jtTestOuterLoop.getColumnCount(), (DefaultTableModel) jtTestOuterLoop.getModel());

                int row = jtLoopPaths.getSelectedRow();
                if (row < staticVariable.LoopTestpath.pathList.size() && row >= 0)
                {
                    rowSelectedOfResultTable = row;
                    DuongKiemThu testpath = staticVariable.LoopTestpath.pathList.get(row);
                    String clickedTestpath = testpath.getTestpathInString();
                    cPhuCap1va2.updateLineColorWhenClick(clickedTestpath);

                    cPhuCap1va2.showSttSelectedTestpath(clickedTestpath);
                    jtpSmt_LibFile.setText(testpath.getSmtFile());
                    jtpTestcase.setText("Output from Z3:\n" + testpath.getTestcaseInZ3() + "\n\nNormalized output:\n" + testpath.getTestcase());
                    // Khi click vào từng đường đi thì hiện danh sách
                    // đường
                    ParseLoopTestpath parser = new ParseLoopTestpath(testpath);
                    try
                    {
                        if (parser.getTypeOfTestpath() == ParseLoopTestpath.SIMPLE_LOOP)
                        {
                            displaySimpleLoop(testpath);
                        }
                        else
                        {
                            displayTwoNestedLoop(testpath);
                        }
                    }
                    catch (Exception e)
                    {
                        e.printStackTrace();
                    }

                }
            }
        });

        jtTestSimpleLoop.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent event)
            {
                int COT_TESTPATH = 1;
                try
                {
                    String clickedTestpath = jtTestSimpleLoop.getValueAt(jtTestSimpleLoop.getSelectedRow(), COT_TESTPATH).toString();
                    DuongKiemThu d = new DuongKiemThu(clickedTestpath, null, staticVariable.Paramater.variableOfTC, "#", staticVariable.Paramater.Smt_Lib_path_lib,
                            staticVariable.Paramater.Smt_Lib_path_file, "clickTestpath.smt2");
                    jtpSmt_LibFile.setText(d.getSmtFile());
                    if (!d.getTestcaseInZ3().contains("unsat"))
                    {
                        jtpTestcase.setText(d.getTestcaseInZ3() + "\n\nNormalized output:\n" + d.getTestcase());
                    }
                    else
                    {
                        jtpTestcase.setText("No solution");
                    }
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        });
        jtTestInnerLoop.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent event)
            {
                int COT_TESTPATH = 1;
                try
                {
                    String clickedTestpath = jtTestInnerLoop.getValueAt(jtTestInnerLoop.getSelectedRow(), COT_TESTPATH).toString();
                    DuongKiemThu d = new DuongKiemThu(clickedTestpath, null, staticVariable.Paramater.variableOfTC, "#", staticVariable.Paramater.Smt_Lib_path_lib,
                            staticVariable.Paramater.Smt_Lib_path_file, "clickTestpath.smt2");
                    jtpSmt_LibFile.setText(d.getSmtFile());
                    if (!d.getTestcaseInZ3().contains("unsat"))
                    {
                        jtpTestcase.setText(d.getTestcaseInZ3() + "\n\nNormalized output:\n" + d.getTestcase());
                    }
                    else
                    {
                        jtpTestcase.setText("No solution");
                    }
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        });
        jtTestOuterLoop.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent event)
            {
                int COT_TESTPATH = 1;
                try
                {
                    String clickedTestpath = jtTestOuterLoop.getValueAt(jtTestOuterLoop.getSelectedRow(), COT_TESTPATH).toString();
                    DuongKiemThu d = new DuongKiemThu(clickedTestpath, null, staticVariable.Paramater.variableOfTC, "#", staticVariable.Paramater.Smt_Lib_path_lib,
                            staticVariable.Paramater.Smt_Lib_path_file, "clickTestpath.smt2");
                    jtpSmt_LibFile.setText(d.getSmtFile());
                    if (!d.getTestcaseInZ3().contains("unsat"))
                    {
                        jtpTestcase.setText(d.getTestcaseInZ3() + "\n\nNormalized output:\n" + d.getTestcase());
                    }
                    else
                    {
                        jtpTestcase.setText("No solution");
                    }
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        });
    }
    //

}
